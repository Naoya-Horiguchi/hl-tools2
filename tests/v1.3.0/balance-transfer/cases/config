LOGLEVEL=DEBUG # INFO # DEBUG
CONFIG_JSON=configs/base.json

FABRIC_NETWORK_NAME=balance-transfer
FABRIC_NETWORK_DIR=$PWD/fabric-samples/balance-transfer

DOCKER_NETWORK=net_byfn
CRYPTO_CONFIG_DIR=$FABRIC_NETWORK_DIR/crypto-config
ARTIFACTS_DIR=$PWD/examples

export FABRIC_DIR=${GOPATH}/src/github.com/hyperledger/fabric
export FABRIC_CA_DIR=${GOPATH}/src/github.com/hyperledger/fabric-ca
export FABRIC_SDK_NODE_DIR=${GOPATH}/src/github.com/hyperledger/fabric-sdk-node

# use official images
FABRIC_BUILD=false

setup_private_keys() {
	echo "updating network-config.yaml"

	local ORG1_PRIVKEY="$(cd $FABRIC_NETWORK_DIR/ ; find crypto-config -type f | grep org1.example.com/users/Admin@org1.example.com/msp/keystore)"
	local ORG2_PRIVKEY="$(cd $FABRIC_NETWORK_DIR/ ; find crypto-config -type f | grep org2.example.com/users/Admin@org2.example.com/msp/keystore)"

	sed \
		-e "s|__org1_adminPrivateKey_path|$ORG1_PRIVKEY|" \
		-e "s|__org2_adminPrivateKey_path|$ORG2_PRIVKEY|" \
		configs/network-config-template.yaml > configs/network-config.yaml
}

TMPD=/tmp/ # $(mktemp -d)

start_fabric_network() {
	pushd $FABRIC_NETWORK_DIR
	./runApp.sh
	popd
}

stop_fabric_network() {
	docker rm -f $(docker ps -qa)
}

start_application() {
	local count=120

	pushd $FABRIC_NETWORK_DIR
	PORT=4000 node app | tee $TMPD/runApp.log &
	while ! grep '***** SERVER STARTED ******' $TMPD/runApp.log ; do
		sleep 1
		count=$[count - 1]
		if [ "$count" -le 0 ] ; then
			echo "runApp.sh seems to fail, abort"
			exit 1
		fi
	done
	popd
}

stop_application() {
	pkill -f "node app"
}
